name: CI/CD Pipeline

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main, develop]
    release:
        types: [published]

env:
    NODE_VERSION: "20"
    PNPM_VERSION: "8"

jobs:
    # Quality Gates
    quality-gates:
        name: Quality Gates
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}

            - name: Setup pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm cache
              uses: actions/cache@v3
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Lint code
              run: pnpm lint

            - name: Type check
              run: pnpm typecheck

            - name: Format check
              run: pnpm format:check

            - name: Security audit
              run: pnpm audit:all

    # Unit Tests
    unit-tests:
        name: Unit Tests
        runs-on: ubuntu-latest
        needs: quality-gates
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}

            - name: Setup pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm cache
              uses: actions/cache@v3
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Run unit tests
              run: pnpm test

            - name: Run tests with coverage
              run: pnpm test:coverage

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v3
              with:
                  file: ./coverage/lcov.info
                  flags: unittests
                  name: codecov-umbrella
                  fail_ci_if_error: false

    # Build Tests
    build-tests:
        name: Build Tests
        runs-on: ubuntu-latest
        needs: quality-gates
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}

            - name: Setup pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm cache
              uses: actions/cache@v3
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Build packages
              run: pnpm build

            - name: Build demo
              run: pnpm build:demo

            - name: Check bundle sizes
              run: pnpm bundle:analyze

            - name: Upload build artifacts
              uses: actions/upload-artifact@v3
              with:
                  name: build-artifacts
                  path: |
                      packages/*/dist
                      .next

    # E2E Tests
    e2e-tests:
        name: E2E Tests
        runs-on: ubuntu-latest
        needs: build-tests
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}

            - name: Setup pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm cache
              uses: actions/cache@v3
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Install Playwright browsers
              run: pnpm exec playwright install --with-deps

            - name: Build packages
              run: pnpm build

            - name: Run E2E tests
              run: pnpm test:e2e

            - name: Run visual regression tests
              run: pnpm test:visual

            - name: Run security tests
              run: pnpm test:security

            - name: Run browser compatibility tests
              run: pnpm test:browser-compatibility

            - name: Run performance benchmark tests
              run: pnpm test:performance-benchmark

            - name: Upload test results
              uses: actions/upload-artifact@v3
              if: always()
              with:
                  name: test-results
                  path: |
                      test-results/
                      playwright-report/

    # Cross-Browser Testing
    cross-browser-tests:
        name: Cross-Browser Tests
        runs-on: ubuntu-latest
        needs: build-tests
        strategy:
            matrix:
                browser: [chromium, firefox, webkit]
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}

            - name: Setup pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm cache
              uses: actions/cache@v3
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Install Playwright browsers
              run: pnpm exec playwright install --with-deps ${{ matrix.browser }}

            - name: Build packages
              run: pnpm build

            - name: Run cross-browser tests
              run: pnpm exec playwright test --project=${{ matrix.browser }}

    # Performance Testing
    performance-tests:
        name: Performance Tests
        runs-on: ubuntu-latest
        needs: build-tests
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}

            - name: Setup pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm cache
              uses: actions/cache@v3
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Install Playwright browsers
              run: pnpm exec playwright install --with-deps

            - name: Build packages
              run: pnpm build

            - name: Run performance tests
              run: pnpm test:performance-benchmark

            - name: Generate performance report
              run: pnpm performance:report

            - name: Upload performance results
              uses: actions/upload-artifact@v3
              with:
                  name: performance-results
                  path: performance-results/

    # Security Scanning
    security-scan:
        name: Security Scan
        runs-on: ubuntu-latest
        needs: quality-gates
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}

            - name: Setup pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm cache
              uses: actions/cache@v3
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Run security audit
              run: pnpm audit:security

            - name: Run dependency audit
              run: pnpm audit:deps

            - name: Run CodeQL Analysis
              uses: github/codeql-action/init@v2
              with:
                  languages: javascript

            - name: Perform CodeQL Analysis
              uses: github/codeql-action/analyze@v2

    # Documentation Generation
    docs-generation:
        name: Documentation Generation
        runs-on: ubuntu-latest
        needs: build-tests
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}

            - name: Setup pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm cache
              uses: actions/cache@v3
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Build packages
              run: pnpm build

            - name: Generate API documentation
              run: pnpm docs:generate

            - name: Upload documentation
              uses: actions/upload-artifact@v3
              with:
                  name: documentation
                  path: docs/

    # Release Preparation
    release-prep:
        name: Release Preparation
        runs-on: ubuntu-latest
        needs:
            [
                unit-tests,
                e2e-tests,
                cross-browser-tests,
                performance-tests,
                security-scan,
            ]
        if: github.event_name == 'release'
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}

            - name: Setup pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm cache
              uses: actions/cache@v3
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Build packages
              run: pnpm build

            - name: Generate changelog
              run: pnpm changeset:version

            - name: Create release notes
              run: pnpm release:notes

            - name: Upload release artifacts
              uses: actions/upload-artifact@v3
              with:
                  name: release-artifacts
                  path: |
                      packages/*/dist
                      CHANGELOG.md

    # Deployment
    deploy:
        name: Deploy
        runs-on: ubuntu-latest
        needs: [release-prep]
        if: github.event_name == 'release'
        environment: production
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Download release artifacts
              uses: actions/download-artifact@v3
              with:
                  name: release-artifacts

            - name: Deploy to npm
              run: pnpm release
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

            - name: Deploy documentation
              run: pnpm docs:deploy
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Create GitHub Release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ github.ref }}
                  release_name: Release ${{ github.ref }}
                  body_path: RELEASE_NOTES.md
                  draft: false
                  prerelease: false

    # Notification
    notify:
        name: Notify
        runs-on: ubuntu-latest
        needs: [deploy]
        if: always()
        steps:
            - name: Notify on success
              if: needs.deploy.result == 'success'
              run: |
                  echo "✅ Release ${{ github.ref }} deployed successfully!"
                  # Add Slack/Discord notification here

            - name: Notify on failure
              if: needs.deploy.result == 'failure'
              run: |
                  echo "❌ Release ${{ github.ref }} failed!"
                  # Add Slack/Discord notification here
